<?php

namespace common\models;

use yii\db\ActiveRecord;

/**
 * Class Transfers
 * @package common\models
 */
class Transfers extends ActiveRecord
{
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGroupFrom()
    {
        return $this->hasOne(Groups::className(), ['id' => 'groupFromId']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGroupTo()
    {
        return $this->hasOne(Groups::className(), ['id' => 'groupToId']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCalfInfo()
    {
        return $this->hasOne(Calf::className(), ['number' => 'calf']);
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        //TODO:: Сделать переводами
        return [
            'groupFromId' => 'Откуда',
            'groupToId' => 'Куда',
            'date' => 'Дата',
            'calf' => 'Телёнок'
        ];
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if (parent::beforeSave($insert)) {
            $this->date = strtotime($this->date);
            return true;
        } else {
            return false;
        }
    }

    /**
     * This method is invoked after validation ends.
     * The default implementation raises an `afterValidate` event.
     * You may override this method to do postprocessing after validation.
     * Make sure the parent implementation is invoked so that the event can be raised.
     */
    public function afterValidate()
    {
        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['groupFromId', 'groupToId', 'date', 'calf'], 'required'],
            [['groupFromId', 'groupToId', 'calf'], 'integer']
        ];
    }
}